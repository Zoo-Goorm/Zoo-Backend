name: CI/CD

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Install JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache Gradle Wrapper
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      - name : Gradle Setup
        uses: gradle/gradle-build-action@v2
        with:
          cache-disabled: false
          gradle-home-cache-includes: |
            caches
            wrapper

      - name: Build With Gradle
        run: |
          chmod +x gradlew
          ./gradlew build -x test --build-cache --parallel

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/my-app .

      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-app:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:

      - name: Set target server variables
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" "https://${{ secrets.LIVE_SERVER_IP }}/actuator/env")
          if [ $STATUS = 200 ]; then
               CURRENT_UPSTREAM=$(curl -s "https://${{ secrets.LIVE_SERVER_IP }}/actuator/env" | jq -r '.activeProfiles[0]')
          else
          CURRENT_UPSTREAM=green
          fi
          echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV
          if [ $CURRENT_UPSTREAM = blue ]; then
            echo "CURRENT_PORT=8080" >> $GITHUB_ENV
            echo "STOPPED_PORT=8081" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          elif [ $CURRENT_UPSTREAM = green ]; then
            echo "CURRENT_PORT=8081" >> $GITHUB_ENV
            echo "STOPPED_PORT=8080" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          else
              exit 1
          fi

      - name: SSH into Server and Deploy
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" > .env
            echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
            echo "AWS_S3_ACCESSKEY=${{ secrets.AWS_S3_ACCESSKEY }}" >> .env
            echo "AWS_S3_SECRETKEY=${{ secrets.AWS_S3_SECRETKEY }}" >> .env
            echo "AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}" >> .env
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
            echo "KAKAO_API_KEY=${{ secrets.KAKAO_API_KEY }}" >> .env
            echo "KAKAO_CLIENT=${{ secrets.KAKAO_CLIENT }}" >> .env
            echo "KAKAO_SECRET=${{ secrets.KAKAO_SECRET }}" >> .env
            echo "GOOGLE_CLIENT=${{ secrets.GOOGLE_CLIENT }}" >> .env
            echo "GOOGLE_SECRET=${{ secrets.GOOGLE_SECRET }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "FRONT_URL=${{ secrets.FRONT_URL }}" >> .env
            echo "GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}" >> .env
            echo "KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}" >> .env          
            
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-app:latest
            sudo docker-compose -f docker-compose-${{env.TARGET_UPSTREAM}}.yml up -d

      - name: Check deploy server URL
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ secrets.LIVE_SERVER_IP }}:${{env.STOPPED_PORT}}/swagger-ui/index.html?continue#/
          max-attempts: 6
          retry-delay: 5s

      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker exec -i nginx bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload' 

      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker stop ${{env.CURRENT_UPSTREAM}}
            sudo docker rm ${{env.CURRENT_UPSTREAM}}
name: Deployment with AWS CodeDeploy

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache Gradle Wrapper
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      - name : Gradle Setup
        uses: gradle/gradle-build-action@v2
        with:
          cache-disabled: false
          gradle-home-cache-includes: |
            caches
            wrapper

      - name: Build With Gradle
        run: |
          chmod +x gradlew
          ./gradlew build -x test --build-cache --parallel

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker Image with Cache
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    if: github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Zip deployment package
        run: zip -r deploy.zip scripts

      - name: Upload deployment package to S3
        run: |
          aws s3 cp deploy.zip s3://${{ secrets.AWS_S3_BUCKET }}/deploy.zip

      - name: Deploy using AWS CodeDeploy
        run: |
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name goorm \
            --deployment-group-name ${{ secrets.DEPLOY_GROUP }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --s3-location bucket=${{ secrets.AWS_S3_BUCKET }},key=deploy.zip,bundleType=zip \
            --query 'deploymentId' \
            --output text)
          
          aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID

      - name: Application Health Check
        run: |
          HEALTH_URL="https://${{ secrets.LIVE_SERVER_IP }}/actuator"
          if curl --fail --retry 5 --retry-delay 10 ${HEALTH_URL}; then
            echo "success"
          else
            echo "fail"
            exit 1
          fi